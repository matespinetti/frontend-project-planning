name: Frontend CI/CD
on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main
env:
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE_NAME: projectplanning-frontend
  NODE_VERSION: '18'
jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Setup pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          version: 10.17.0
      - name: Setup Nodejs
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION}}
          cache: "pnpm"
      - name: ‚¨áÔ∏è Install dependencies
        run: pnpm install --frozen-lockfile
      - name: üîç Run ESLint
        run: pnpm lint
      - name: Build application (test build)
        run: pnpm build
        env:
          HOLA: hola 
      - name: Comment on PR (Success)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚úÖ Build completed successfully! The application is ready for deployment.'
            })
      - name: Comment on PR(Failure)
        if: github.event_name == 'pull_request' && failure()
        uses: actions/github-script@v8
        with:
          script: |
            const { owner, repo, number } = context.issue;
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: '‚ùå **Frontend CI failed!** \n\nPlease check the workflow logs and fix the issues before merging.'
            });

  build_and_deploy:
    name: Build and Deploy(Production)
    runs-on: ubuntu-latest
    needs: test
    if: |   
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main' &&
      github.event.head_commit.message != null
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v5
      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1
        with:
          platforms: linux/amd64, linux/arm64
      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3.5.0
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: üè∑Ô∏è Extract metadata
        id: meta
        uses: docker/metadata-action@v5.8.0
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=main-,format=short
            type=raw,value=latest
            type=raw,value=production
          labels: |
            org.opencontainers.image.title=ProjectPlanning Frontend
            org.opencontainers.image.description=Next.js frontend for ProjectPlanning NGO platform
            org.opencontainers.image.vendor=ProjectPlanning Team
      - name: üèóÔ∏è Build and push Docker image
        uses: docker/build-push-action@v6.18.0
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            FOO=bar
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: ‚è≥ Wait for Docker Hub propagation
        run: |
          echo "‚è≥ Waiting for image to be available on Docker Hub..."
          sleep 15
          
          # Verify image exists
          echo "üîç Verifying image exists on Docker Hub..."
          docker manifest inspect ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest