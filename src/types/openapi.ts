/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/projects/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Project
         * @description Get full project details by ID.
         *
         *     Used by Bonita process to fetch project information when needed.
         *     Returns proyecto with all nested etapas and pedidos.
         */
        get: operations["get_project_api_v1_projects__project_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Project
         * @description Create a new proyecto with nested etapas and pedidos.
         *     Also starts a Bonita BPM process instance.
         *
         *     Request Flow:
         *     1. Validate incoming data with Pydantic
         *     2. Create proyecto, etapas, and pedidos in database
         *     3. Start Bonita process instance
         *     4. Update proyecto with Bonita information
         *     5. Return complete proyecto with Bonita info
         */
        post: operations["create_project_api_v1_projects_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Root
         * @description Root endpoint - health check.
         */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check endpoint.
         */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * EtapaCreate
         * @description Schema for creating an etapa (project stage).
         */
        EtapaCreate: {
            /**
             * Nombre
             * @description Stage name
             */
            nombre: string;
            /**
             * Descripcion
             * @description Stage description
             */
            descripcion: string;
            /**
             * Fecha Inicio
             * @description Start date (ISO format)
             */
            fecha_inicio: string;
            /**
             * Fecha Fin
             * @description End date (ISO format)
             */
            fecha_fin: string;
            /**
             * Pedidos
             * @description List of coverage requests
             */
            pedidos: components["schemas"]["PedidoCreate"][];
        };
        /**
         * EtapaResponse
         * @description Schema for etapa response.
         */
        EtapaResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Nombre */
            nombre: string;
            /** Descripcion */
            descripcion: string;
            /**
             * Fecha Inicio
             * Format: date
             */
            fecha_inicio: string;
            /**
             * Fecha Fin
             * Format: date
             */
            fecha_fin: string;
            /**
             * Proyecto Id
             * Format: uuid
             */
            proyecto_id: string;
            /**
             * Pedidos
             * @default []
             */
            pedidos: components["schemas"]["PedidoResponse"][];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * PedidoCreate
         * @description Schema for creating a pedido (coverage request).
         */
        PedidoCreate: {
            /**
             * Tipo
             * @description economico|materiales|mano_obra
             */
            tipo: string;
            /**
             * Descripcion
             * @description Description of the request
             */
            descripcion: string;
            /**
             * Monto
             * @description Amount (for economico)
             */
            monto?: number | null;
            /**
             * Moneda
             * @description Currency code (for economico)
             */
            moneda?: string | null;
            /**
             * Cantidad
             * @description Quantity (for materiales/mano_obra)
             */
            cantidad?: number | null;
            /**
             * Unidad
             * @description Unit (for materiales/mano_obra)
             */
            unidad?: string | null;
        };
        /**
         * PedidoResponse
         * @description Schema for pedido response.
         */
        PedidoResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Tipo */
            tipo: string;
            /** Descripcion */
            descripcion: string;
            /** Monto */
            monto?: number | null;
            /** Moneda */
            moneda?: string | null;
            /** Cantidad */
            cantidad?: number | null;
            /** Unidad */
            unidad?: string | null;
            /**
             * Etapa Id
             * Format: uuid
             */
            etapa_id: string;
        };
        /**
         * ProyectoCreate
         * @description Schema for creating a proyecto.
         */
        ProyectoCreate: {
            /**
             * Titulo
             * @description Project title
             */
            titulo: string;
            /**
             * Descripcion
             * @description Project description
             */
            descripcion: string;
            /**
             * Tipo
             * @description Project type
             */
            tipo: string;
            /**
             * Pais
             * @description Country
             */
            pais: string;
            /**
             * Provincia
             * @description Province/State
             */
            provincia: string;
            /**
             * Ciudad
             * @description City
             */
            ciudad: string;
            /**
             * Barrio
             * @description Neighborhood
             */
            barrio?: string | null;
            /**
             * Etapas
             * @description Project stages
             */
            etapas: components["schemas"]["EtapaCreate"][];
        };
        /**
         * ProyectoCreateResponse
         * @description Schema for proyecto creation response with Bonita info.
         */
        ProyectoCreateResponse: {
            proyecto: components["schemas"]["ProyectoResponse"];
            /** Bonita Case Id */
            bonita_case_id?: string | null;
            /** Bonita Process Url */
            bonita_process_url?: string | null;
            /** Message */
            message: string;
        };
        /**
         * ProyectoResponse
         * @description Schema for proyecto response.
         */
        ProyectoResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Titulo */
            titulo: string;
            /** Descripcion */
            descripcion: string;
            /** Tipo */
            tipo: string;
            /** Pais */
            pais: string;
            /** Provincia */
            provincia: string;
            /** Ciudad */
            ciudad: string;
            /** Barrio */
            barrio?: string | null;
            /** Estado */
            estado: string;
            /** Bonita Case Id */
            bonita_case_id?: string | null;
            /** Bonita Process Instance Id */
            bonita_process_instance_id?: number | null;
            /**
             * Fecha Creacion
             * Format: date-time
             */
            fecha_creacion: string;
            /**
             * Fecha Actualizacion
             * Format: date-time
             */
            fecha_actualizacion: string;
            /**
             * Etapas
             * @default []
             */
            etapas: components["schemas"]["EtapaResponse"][];
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_project_api_v1_projects__project_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProyectoResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_project_api_v1_projects_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProyectoCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProyectoCreateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
